/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package TerrainGenerator;

import com.cubes.BlockChunkControl;
import com.cubes.Vector3Int;
import com.cubes.network.BitInputStream;
import com.cubes.network.BitOutputStream;
import com.jme3.system.AppSettings;
import com.jme3.system.JmeCanvasContext;
import com.jme3.util.JmeFormatter;
import java.awt.BorderLayout;
import java.awt.Canvas;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.logging.ConsoleHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Maestro
 */
public class MapEditor extends javax.swing.JFrame {
    FileChooserTest openFile;
    public File currentFile;
    public String currentDir;
    /**
     * Creates new form MapEditor
     */
    public MapEditor() {
        // Code from main() refactored into global frame constructor
        JmeFormatter formatter = new JmeFormatter();

        Handler consoleHandler = new ConsoleHandler();
        consoleHandler.setFormatter(formatter);

        Logger.getLogger("").removeHandler(Logger.getLogger("").getHandlers()[0]);
        Logger.getLogger("").addHandler(consoleHandler);
        
        // We create the jME3 instance within the frame's constructor
        createCanvas(appClass);
        //this.addWindowListener(null);
        try {
            Thread.sleep(500);
        } catch (InterruptedException ex) {
        }
        initComponents();
    }
    
    public static void createCanvas(String appClass){
        AppSettings settings = new AppSettings(true);
        settings.setWidth(1024);
        settings.setHeight(600);
        app = new TestPicking();
        
        app.setPauseOnLostFocus(false);
        app.setSettings(settings);
        app.createCanvas();
        app.startCanvas();

        context = (JmeCanvasContext) app.getContext();
        canvas = context.getCanvas();
        canvas.setSize(settings.getWidth(), settings.getHeight());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSidebarPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jBlockSelectionList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jmeViewPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jNewMenuItem = new javax.swing.JMenuItem();
        jOpenMenuItem = new javax.swing.JMenuItem();
        jSaveAsMenuItem = new javax.swing.JMenuItem();
        jSaveMenuItem = new javax.swing.JMenuItem();
        jEditMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jBlockSelectionList.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jBlockSelectionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Grass", "Wood", "Stone", "Brick" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jBlockSelectionList.setToolTipText("Block Selection");
        jBlockSelectionList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jBlockSelectionListValueChanged(evt);
            }
        });
        jBlockSelectionList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jBlockSelectionListPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(jBlockSelectionList);

        jLabel1.setText("CubesAsset Block Selection");

        javax.swing.GroupLayout jSidebarPanel1Layout = new javax.swing.GroupLayout(jSidebarPanel1);
        jSidebarPanel1.setLayout(jSidebarPanel1Layout);
        jSidebarPanel1Layout.setHorizontalGroup(
            jSidebarPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSidebarPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jSidebarPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jSidebarPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jSidebarPanel1Layout.setVerticalGroup(
            jSidebarPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jSidebarPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 346, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(270, Short.MAX_VALUE))
        );

        jmeViewPanel2.add(this.canvas, BorderLayout.CENTER);

        javax.swing.GroupLayout jmeViewPanel2Layout = new javax.swing.GroupLayout(jmeViewPanel2);
        jmeViewPanel2.setLayout(jmeViewPanel2Layout);
        jmeViewPanel2Layout.setHorizontalGroup(
            jmeViewPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 998, Short.MAX_VALUE)
        );
        jmeViewPanel2Layout.setVerticalGroup(
            jmeViewPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 647, Short.MAX_VALUE)
        );

        jTextPane1.setEditable(false);
        jScrollPane2.setViewportView(jTextPane1);

        jFileMenu.setText("File");

        jNewMenuItem.setText("New");
        jNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jNewMenuItem);

        jOpenMenuItem.setText("Open");
        jOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jOpenMenuItem);

        jSaveAsMenuItem.setText("Save As");
        jSaveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveAsMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jSaveAsMenuItem);

        jSaveMenuItem.setText("Save");
        jSaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jSaveMenuItem);

        jMenuBar1.add(jFileMenu);

        jEditMenu.setText("Edit");
        jMenuBar1.add(jEditMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jSidebarPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jmeViewPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSidebarPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jmeViewPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewMenuItemActionPerformed
        // TODO add your handling code here for NEW:
        System.out.println("Menu Command: " + evt.getActionCommand());
        JOptionPane jOptionPane = new JOptionPane();
        //jOptionPane
    }//GEN-LAST:event_jNewMenuItemActionPerformed

    private void jOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenMenuItemActionPerformed
        // Create OPEN dialog:
        System.out.println("Menu Command: " + evt.getActionCommand());
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("WORLD FILES", "world");
        fileChooser.setFileFilter(filter);
        int returnVal = fileChooser.showOpenDialog(jmeViewPanel2);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            //Get file selected from dialog
            File file = fileChooser.getSelectedFile();
            String fileName = fileChooser.getSelectedFile().getPath();
            boolean split = fileName.contains("world");
            //System.out.println(split.length);
            //if(split[1].equals("world")){
                FileInputStream in;
                try {
                    in = new FileInputStream(fileName);
                    BitInputStream stream = new BitInputStream(in);
                    
                    app.terrainNode.removeControl(app.blockTerrain);
                    app.blockTerrain.read(stream);
                    app.terrainNode.addControl(app.blockTerrain);
                    stream.close();
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MapEditor.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(MapEditor.class.getName()).log(Level.SEVERE, null, ex);
                }
            //}
            //fileName = fileName + ".world";
            System.out.println("Open file: " + fileName);
        }
    }//GEN-LAST:event_jOpenMenuItemActionPerformed

    private void jSaveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveAsMenuItemActionPerformed
        // TODO add your handling code here for SAVE AS:
        //System.out.println("Menu Command: " + evt.getActionCommand());
        JFileChooser fileChooser = new JFileChooser(System.getProperty("User.dir"));
        
        int returnVal = fileChooser.showSaveDialog(jmeViewPanel2);
        if(returnVal == JFileChooser.APPROVE_OPTION){
            //Get file selected from dialog
            File file = fileChooser.getSelectedFile();
            
            String fileName = fileChooser.getSelectedFile().getPath();
            currentFile = fileChooser.getSelectedFile();
            if(fileName.contains(".world") == false ){
                fileName = fileName + ".world";
            }
            //System.out.println(fileName);
            try {
                FileOutputStream out = new FileOutputStream(fileName);
                BitOutputStream stream = new BitOutputStream(out);
                //System.out.println("Selected file : " + file.getName());
                //Save the data to the file
                app.blockTerrain.write(stream);
                BlockChunkControl chunks[][][] = app.blockTerrain.getChunks();
                stream.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MapEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jSaveAsMenuItemActionPerformed

    private void jSaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveMenuItemActionPerformed
        // TODO add your handling code here for SAVE:
        System.out.println("Menu Command: " + evt.getActionCommand());
    }//GEN-LAST:event_jSaveMenuItemActionPerformed

    private void jBlockSelectionListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jBlockSelectionListPropertyChange
        // TODO add your handling code here:
        System.out.println("List Event: " + jBlockSelectionList.getSelectedIndex());
        app.selectBlock(jBlockSelectionList.getSelectedIndex());
        
    }//GEN-LAST:event_jBlockSelectionListPropertyChange

    private void jBlockSelectionListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jBlockSelectionListValueChanged
        // TODO add your handling code here:
        System.out.println("List Event: " + jBlockSelectionList.getSelectedIndex());
        app.selectBlock(jBlockSelectionList.getSelectedIndex());
        
    }//GEN-LAST:event_jBlockSelectionListValueChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MapEditor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MapEditor().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList jBlockSelectionList;
    private javax.swing.JMenu jEditMenu;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jNewMenuItem;
    private javax.swing.JMenuItem jOpenMenuItem;
    private javax.swing.JMenuItem jSaveAsMenuItem;
    private javax.swing.JMenuItem jSaveMenuItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel jSidebarPanel1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JPanel jmeViewPanel2;
    // End of variables declaration//GEN-END:variables
    
    private static JmeCanvasContext context;
    private static Canvas canvas;
    //private jMEListen listener;
    private int currentJointSelection;
    private Timer t;
    private boolean jME_up = false;
    private final static int ONE_SECOND = 1000;
    private int gui_NewPoseCount = 0;
    private DefaultListModel listModel;
    // Class member for simple app interface
    private static TestPicking app;
    // The appClass string defines which java main class to embed within the panel
    private static final String appClass = "TerrainGenerator.TestPicking";
}
